{{/*
	Trigger: dbresetkey
	Trigger Type: Command

	Usage:
	dbresetkey <Key>

	Copyright (c): Black Wolf, 2021
	License: MIT
	Repository: https://github.com/BlackWolfWoof/yagpdb-cc/
*/}}
{{$perms := "Administrator"}}
{{/*The bot will check if the user has this permission.
Permissions available: Administrator, ManageServer, ReadMessages, SendMessages, SendTTSMessages, ManageMessages, EmbedLinks, AttachFiles, ReadMessageHistory, MentionEveryone, VoiceConnect, VoiceSpeak, VoiceMuteMembers, VoiceDeafenMembers, VoiceMoveMembers, VoiceUseVAD, ManageNicknames, ManageRoles, ManageWebhooks, ManageEmojis, CreateInstantInvite, KickMembers, BanMembers, ManageChannels, AddReactions, ViewAuditLogs*/}}

{{if not .ExecData}}
	{{if (in (split (index (split (exec "viewperms") "\n") 2) ", ") $perms)}}
		{{$prefix := index (reFindAllSubmatches `Prefix of \x60\d+\x60: \x60(.+)\x60` (exec "prefix")) 0 1}}
		{{$args := parseArgs 1 (print $prefix "dbresetkey <Key/Code>") (carg "string" "<Key/Code>")}}
		{{with (dbGet .User.ID "dbresetkey").Value}}
			{{if eq ($args.Get 0|str) .code}}
				{{$all := dbCount .key}}
				{{$msgID := sendMessageRetID nil (cembed "author" (sdict "icon_url" "https://cdn.discordapp.com/emojis/714051544265392229.gif" "name" (print "This might take a while... (0/" $all ")")) "description" "Please wait until the command is done running.\n**Do not run dbresetkey again until it is finished!**\nYou will be pinged if the reset is done :)" "color" 0xFAA61A)}}
				{{dbDel $.User.ID "dbresetkey"}}
				{{execCC $.CCID nil 6 (sdict "id" $msgID "all" $all "time" currentTime "key" .key "count" 0)}}
				{{deleteTrigger 1}}
				{{deleteMessage nil .msgid 0}}
			{{else}}
				{{dbDel $.User.ID "dbresetkey"}}
				{{sendMessage nil (print "Wrong code provided. Use `" $prefix "dbresetkey <Key>` and generate a new code.")}}
				{{deleteMessage nil .msgid 0}}
			{{end}}
		{{else}}
			{{$rand := ""}}{{range seq 0 10}}{{$x := 97}}{{if randInt 2}}{{$x = 65}}{{end}}{{$rand = printf "%s%c" $rand (add $x 26|randInt $x)}}{{end}}
				{{$msgID := sendMessageRetID nil (cembed
					"title" "Hold up!"
					"description" (printf "⚠️ **YOU ARE ABOUT TO DELETE `%d` ENTRIES WITH THE NAME `%s` FROM THE YAGPDB DATABASE ON THIS SERVER\n\nARE YOU SURE YOU WANT TO DO THIS?**\n**❗There is no going back once you confirmed❗**\n\n<:s:650328464825516062> __If you still want to proceed run__ `%sdbresetkey %s`\nThe above code will expire <t:%d:R> (60 seconds from now)" ($args.Get 0|dbCount) ($args.Get 0) $prefix $rand (mult .TimeSecond 60|toDuration|currentTime.Add).Unix)
					"thumbnail" (sdict "url" "https://cdn.discordapp.com/emojis/565142262401728512.png")
					"color" 0xBE1931
				)}}
			{{dbSetExpire .User.ID "dbresetkey" (sdict "code" $rand "msgid" $msgID "key" ($args.Get 0)) 60}}
			{{deleteMessage nil $msgID 60}}
		{{end}}
	{{else}}
		{{sendMessage nil (cembed "title" "Missing permissions" "description" (print "<:cross:705738821110595607> You are missing the permission `" $perms "` to use this command!") "color" 0xDD2E44)}}
	{{end}}
{{else}}
	{{$data := .ExecData}}
	{{$count := 1}}

	{{if .IsPremium}}
		{{range seq 0 9}}
			{{- if $count}}
				{{- $count = dbDelMultiple (sdict "pattern" $data.key) 100 0}}
				{{- $data.Set "count" (add $data.count $count)}}
			{{- end -}}
		{{end}}
	{{else}}
		{{$count = dbDelMultiple (sdict "pattern" $data.key) 100 0}}
		{{$data.Set "count" (add $data.count $count)}}
	{{end}}

	{{if $count}}
		{{editMessage nil $data.id (cembed "author" (sdict "icon_url" "https://cdn.discordapp.com/emojis/714051544265392229.gif" "name" (print "This might take a while... (" (sub $data.all (dbCount $data.key)) "/" $data.all ")")) "description" "Please wait until the command is done running.\n**Do not run dbresetkey again until it is finished!**\nYou will be pinged if the reset is done :)" "color" 0xFAA61A)}}
		{{execCC .CCID nil 8 $data}}
	{{else}}
		{{sendMessage nil (complexMessage "content" .User.Mention "embed" (cembed
		"title" (print "I am done resetting \"" $data.key "\"! <:wolfyey:664130162023202816>")
		"description" (print "Deleted entries: " $data.count "\nElapsed time: " (toDuration (print ((currentTime.Sub $data.time).Seconds|roundCeil) "s")))
		"color" 0x43B581))}}
		{{deleteMessage nil $data.id 0}}
	{{end}}
{{end}}